variables:
  CI_IMG: "\"${CI_REGISTRY_IMAGE}:latest\""
  TP_URL: "${CI_PROJECT_NAMESPACE}.bham.team"
  TP_CONTACT: "${GITLAB_USER_EMAIL}"

cache:
  key: '$CI_COMMIT_REF_NAME'

stages:
  - check
#  - build
  - test
#  - analyze
#  - package
#  - release
  - publish
  - deploy


code-check:
  image: python:3.11.2
  stage: check
  only:
    - release
  script:
    - pip install -r askit/requirements.txt
    - python askit/manage.py check


django-tests:
  image: python:3.11.2
  stage: test
  only:
    - release
  script:
    - pip install -r askit/requirements.txt
    - pytest askit --ds=askit.dev_settings


publish-docker:
  image: docker:stable
  stage: publish
  only:
    - release
  services:
    - docker:dind
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "pushing ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CI_REGISTRY_IMAGE}:tpdjango djangosite/
    - docker push ${CI_REGISTRY_IMAGE}:tpdjango
    - docker build -t ${CI_REGISTRY_IMAGE}:tpvue askit_frontend/
    - docker push ${CI_REGISTRY_IMAGE}:tpvue
#    - docker build -t ${CI_REGISTRY_IMAGE}:tpnginx nginx/
#    - docker push ${CI_REGISTRY_IMAGE}:tpnginx
#    - docker build -t ${CI_REGISTRY_IMAGE}:tppostgres postgres/
#    - docker push ${CI_REGISTRY_IMAGE}:tppostgres

# uncomment this once the $RSA $VM_USER@$VM are set in the repo - Setting -> CI/CD -> variables
# $RSA should be a private key file, $VM_USER is the VM user name (e.g. root or ec2) and $VM is the IP address of the Virtual Machine
# this assumes docker and SSH is installed on the $VM
deploy-git:
  image: alpine:latest
  stage: deploy
  only:
    - release
  when: on_success
  before_script:
    - chmod og= $RSA
    - apk update && apk add openssh-client
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpdjango || true"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpnginx || true"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tppostgres || true"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpdjango || true"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpnginx || true"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tppostgres || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker-compose.yml down || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "rm -rf ~/team-project-deployment || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpdjango"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpnginx"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tppostgres"
  script:
    - scp -o StrictHostKeyChecking=no -i $RSA -r . $VM_USER@$VM:~/team-project-deployment
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d --name tppostgres --network-alias tppostgres ${CI_REGISTRY_IMAGE}:tppostgres"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 8000:8000 --name tpdjango --link tppostgres:tppostgres --network-alias tpdjango --volume tppgdata:/var/lib/postgresql/data ${CI_REGISTRY_IMAGE}:tpdjango"
#    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 80:80 -p 443:443 --name tpnginx --link tpdjango:tpdjango --network-alias tpnginx --volume /home/ec2-user/teamai55-22.bham.team/teamai55-22.bham.team:/key ${CI_REGISTRY_IMAGE}:tpnginx"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker-compose.yml up -d"